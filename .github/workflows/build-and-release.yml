name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch: # Allows manual trigger

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for versioning

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Get mod version from gradle.properties
        id: get_version
        run: |
          VERSION=$(grep "^mod_version" gradle.properties | cut -d'=' -f2 | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Mod version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Find JAR file
        id: find_jar
        run: |
          JAR_PATH=$(find build/libs -name "*.jar" ! -name "*-sources.jar" ! -name "*-dev.jar" | head -n 1)
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "jar_name=$(basename $JAR_PATH)" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_PATH"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save to file to preserve formatting
          echo "$CHANGELOG" > changelog.txt
          echo "Previous tag: $PREV_TAG"

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: WebcamHead v${{ steps.get_version.outputs.version }}
          body_path: changelog.txt
          files: |
            ${{ steps.find_jar.outputs.jar_path }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: webcamhead-${{ steps.get_version.outputs.version }}
          path: ${{ steps.find_jar.outputs.jar_path }}
          retention-days: 30

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR**: ${{ steps.find_jar.outputs.jar_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_tag.outputs.exists }}" == "true" ]; then
            echo "- **Status**: Tag already exists, skipped release" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: New release created" >> $GITHUB_STEP_SUMMARY
          fi
